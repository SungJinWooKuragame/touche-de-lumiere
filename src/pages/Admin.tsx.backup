import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { Navbar } from "@/components/Navbar";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { supabase } from "@/integrations/supabase/client";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";
import { Calendar, Clock, X, Check, Loader2, Edit, Trash2, Plus, Settings, Save, ExternalLink } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { GoogleCalendarAPI } from "@/lib/google-calendar-api";
import { useTranslation } from "react-i18next";

export default function Admin() {
  const navigate = useNavigate();
  const { toast } = useToast();
  const { t } = useTranslation();

  // Fun√ß√£o para abrir Google Calendar
  const openGoogleCalendar = () => {
    window.open('https://calendar.google.com', '_blank');
  };

  // Fun√ß√£o para limpar todos os agendamentos (APENAS PARA TESTES)
  const clearAllAppointments = async () => {
    const confirmed = confirm(`‚ö†Ô∏è ATEN√á√ÉO: OPERA√á√ÉO DESTRUTIVA! ‚ö†Ô∏è

Isso vai DELETAR PERMANENTEMENTE todos os agendamentos:
- Pendentes: ${pendingCount}
- Confirmados: ${confirmedCount} 
- Total: ${appointments.length}

Esta a√ß√£o N√ÉO PODE ser desfeita!

Tem absoluta certeza que deseja continuar?`);

    if (!confirmed) return;

    setIsLoading(true);
    
    try {
      console.log(`üóëÔ∏è Tentando deletar ${appointments.length} agendamentos...`);
      
      // M√©todo direto: deletar todos os IDs um por um
      let deletedCount = 0;
      
      for (const appointment of appointments) {
        try {
          const { error } = await supabase
            .from("appointments")
            .delete()
            .eq("id", appointment.id);
            
          if (!error) {
            deletedCount++;
            console.log(`‚úÖ Deletado: ${appointment.id}`);
          } else {
            console.error(`‚ùå Erro ao deletar ${appointment.id}:`, error);
          }
        } catch (err) {
          console.error(`üíÄ Falha cr√≠tica ao deletar ${appointment.id}:`, err);
        }
      }
      
      console.log(`üéØ Resultado: ${deletedCount}/${appointments.length} agendamentos deletados`);

      if (deletedCount > 0) {
        toast({
          title: "üßπ LIMPEZA REALIZADA!",
          description: `${deletedCount} de ${appointments.length} agendamentos foram DELETADOS!`,
          duration: 4000,
        });
      } else {
        toast({
          variant: "destructive",
          title: "‚ùå Falha na Limpeza",
          description: "Nenhum agendamento foi deletado. Verifique as permiss√µes.",
        });
      }

      // For√ßar reload da lista
      await loadAppointments();
      
    } catch (error: any) {
      console.error("üíÄ Erro na limpeza:", error);
      toast({
        variant: "destructive",
        title: "Erro na Limpeza",
        description: `Erro: ${error.message}`,
      });
    } finally {
      setIsLoading(false);
    }
  };
  const [appointments, setAppointments] = useState<any[]>([]);
  const [selectedApt, setSelectedApt] = useState<any>(null);
  const [cancellationReason, setCancellationReason] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [services, setServices] = useState<any[]>([]);
  const [editingService, setEditingService] = useState<any>(null);
  const [isServiceDialogOpen, setIsServiceDialogOpen] = useState(false);
  const [siteSettings, setSiteSettings] = useState<Record<string, string>>({});
  const [isSettingsLoading, setIsSettingsLoading] = useState(false);
  const [googleCalendarSettings, setGoogleCalendarSettings] = useState({
    client_id: "",
    client_secret: "",
    connected: false,
    email: ""
  });
  const [googleCredentials, setGoogleCredentials] = useState<any>(null);
  
  // Estados para gest√£o de hor√°rios
  const [operatingHours, setOperatingHours] = useState<any[]>([]);
  const [dateBlocks, setDateBlocks] = useState<any[]>([]);
  const [notificationSettings, setNotificationSettings] = useState<any[]>([]);
  const [isOperatingHoursLoading, setIsOperatingHoursLoading] = useState(false);

  useEffect(() => {
    checkOwnerRole();
    loadGoogleCalendarSettings();
    handleGoogleCallback(); // Verificar se retornou do Google OAuth
    verifyGoogleCredentials(); // Verificar credenciais existentes
    loadOperatingHours(); // Carregar hor√°rios de funcionamento
    loadDateBlocks(); // Carregar bloqueios de datas
  }, []);

  // Verificar se as credenciais salvas ainda s√£o v√°lidas
  const verifyGoogleCredentials = () => {
    try {
      const credentials = localStorage.getItem('google_calendar_credentials');
      if (credentials) {
        const creds = JSON.parse(credentials);
        const now = Math.floor(Date.now() / 1000);
        const expiry = creds.expiry_date || creds.expires_at || 0;
        
        if (expiry > 0 && now > expiry) {
          console.log('üßπ Removendo token expirado na inicializa√ß√£o...');
          localStorage.removeItem('google_calendar_credentials');
          localStorage.removeItem('google_calendar_email');
          setGoogleCredentials(null);
          setGoogleCalendarSettings(prev => ({
            ...prev,
            connected: false,
            email: ''
          }));
        } else if (creds.access_token) {
          console.log('‚úÖ Token v√°lido encontrado na inicializa√ß√£o');
          setGoogleCredentials(creds);
        }
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar credenciais:', error);
      localStorage.removeItem('google_calendar_credentials');
    }
  };

  const checkOwnerRole = async () => {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      navigate("/login");
      return;
    }

    const { data: roles } = await supabase
      .from("user_roles")
      .select("role")
      .eq("user_id", session.user.id);

    if (!roles?.some(r => r.role === "owner")) {
      navigate("/perfil");
      return;
    }

    loadAppointments();
    loadServices();
    loadSiteSettings();
  };

  const loadSiteSettings = async () => {
    const { data, error } = await supabase
      .from("site_settings")
      .select("*");

    if (!error && data) {
      const settingsMap = data.reduce((acc, item) => {
        acc[item.key] = item.value;
        return acc;
      }, {} as Record<string, string>);
      setSiteSettings(settingsMap);
    }
  };

  const loadGoogleCalendarSettings = async () => {
    try {
      // Carregar credenciais do localStorage
      const localCredentials = localStorage.getItem('google_calendar_credentials');
      const connectedEmail = localStorage.getItem('google_calendar_email');
      
      console.log('üîç Carregando configura√ß√µes Google Calendar...');
      console.log('üìã Credenciais locais:', localCredentials ? 'Encontradas' : 'N√£o encontradas');
      console.log('üìß Email conectado:', connectedEmail);
      
      if (localCredentials) {
        const credentials = JSON.parse(localCredentials);
        
        // Verificar se token n√£o expirou
        const now = Math.floor(Date.now() / 1000);
        const expiry = credentials.expiry_date || credentials.expires_at || 0;
        const isExpired = expiry > 0 && now > expiry;
        
        console.log('üîë Credenciais decodificadas:', {
          has_client_id: !!credentials.client_id,
          has_client_secret: !!credentials.client_secret,
          has_access_token: !!credentials.access_token,
          expires_at: credentials.expires_at ? new Date(credentials.expires_at).toLocaleString() : 'N/A',
          is_expired: isExpired
        });
        
        if (isExpired) {
          console.log('üßπ Token expirado detectado em loadGoogleCalendarSettings, removendo...');
          localStorage.removeItem('google_calendar_credentials');
          localStorage.removeItem('google_calendar_email');
          setGoogleCalendarSettings(prev => ({
            ...prev,
            client_id: credentials.client_id || "",
            client_secret: credentials.client_secret || "",
            connected: false,
            email: ""
          }));
        } else {
          setGoogleCalendarSettings(prev => ({
            ...prev,
            client_id: credentials.client_id || "",
            client_secret: credentials.client_secret || "",
            connected: !!credentials.access_token && !!connectedEmail,
            email: connectedEmail || ""
          }));
        }
      }

      // Verificar se est√° conectado no Supabase
      const { data } = await supabase
        .from("site_settings")
        .select("value")
        .eq("key", "google_calendar_connected")
        .single();

      if (data?.value === "true" && connectedEmail) {
        console.log('‚úÖ Status conectado confirmado no Supabase');
      }
    } catch (error) {
      console.log("‚ö†Ô∏è Configura√ß√µes do Google Calendar n√£o encontradas:", error);
    }
  };

  const saveGoogleCalendarSettings = async (clientId: string, clientSecret: string) => {
    setIsLoading(true);
    
    try {
      // Salvar no localStorage (permanente no navegador)
      const credentials = { client_id: clientId, client_secret: clientSecret };
      localStorage.setItem('google_calendar_credentials', JSON.stringify(credentials));

      // Salvar no Supabase tamb√©m
      const { error } = await supabase
        .from("site_settings")
        .upsert({
          key: "google_credentials",
          value: JSON.stringify(credentials)
        });

      if (error) {
        console.log("Aviso: N√£o foi poss√≠vel salvar no banco, mas salvo localmente");
      }

      toast({
        title: "‚úÖ Credenciais Salvas!",
        description: "Client ID e Secret salvos permanentemente. N√£o precisar√° digitar novamente!",
      });
      
      // Atualizar configura√ß√µes
      setGoogleCalendarSettings(prev => ({
        ...prev,
        client_id: clientId,
        client_secret: clientSecret
      }));
      
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "Erro",
        description: error.message,
      });
    }
    
    setIsLoading(false);
  };

  const connectGoogleCalendar = async () => {
    try {
      setIsLoading(true);
      
      // Verificar se as credenciais foram salvas
      if (!googleCalendarSettings.client_id) {
        toast({
          variant: "destructive",
          title: "Erro",
          description: "Primeiro salve as credenciais do Google Calendar!",
        });
        setIsLoading(false);
        return;
      }
      
      // Construir URL OAuth diretamente (sem Edge Function)
      const redirectUri = `${window.location.origin}/admin`;
      const clientId = googleCalendarSettings.client_id;
      
      const authUrl = new URL('https://accounts.google.com/o/oauth2/v2/auth');
      authUrl.searchParams.set('client_id', clientId);
      authUrl.searchParams.set('redirect_uri', redirectUri);
      authUrl.searchParams.set('response_type', 'code');
      authUrl.searchParams.set('scope', 'https://www.googleapis.com/auth/calendar');
      authUrl.searchParams.set('access_type', 'offline');
      authUrl.searchParams.set('prompt', 'consent');
      authUrl.searchParams.set('state', 'google_calendar_auth');
      
      // Salvar que estamos em processo de autentica√ß√£o
      localStorage.setItem('google_auth_in_progress', 'true');
      
      // Redirecionar para autoriza√ß√£o do Google
      window.location.href = authUrl.toString();
      
    } catch (error: any) {
      setIsLoading(false);
      toast({
        variant: "destructive",
        title: "Erro",
        description: error.message || "Erro ao conectar com Google Calendar",
      });
    }
  };

  const handleGoogleCallback = async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get('code');
    const state = urlParams.get('state');
    const wasAuthInProgress = localStorage.getItem('google_auth_in_progress');
    
    if (code && state === 'google_calendar_auth' && wasAuthInProgress) {
      try {
        setIsLoading(true);
        
        // Limpar flag de autentica√ß√£o
        localStorage.removeItem('google_auth_in_progress');
        
        // Trocar c√≥digo por tokens REAIS
        const credentials = JSON.parse(localStorage.getItem('google_calendar_credentials') || '{}');
        
        if (!credentials.client_id || !credentials.client_secret) {
          throw new Error('Credenciais n√£o encontradas. Configure primeiro o Client ID e Secret.');
        }

        console.log('üîÑ Trocando c√≥digo por tokens...');
        
        const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: new URLSearchParams({
            client_id: credentials.client_id,
            client_secret: credentials.client_secret,
            code: code,
            grant_type: 'authorization_code',
            redirect_uri: `${window.location.origin}/admin`,
          }),
        });

        if (!tokenResponse.ok) {
          const error = await tokenResponse.json();
          throw new Error(`Erro OAuth: ${error.error_description || error.error}`);
        }

        const tokens = await tokenResponse.json();
        console.log('‚úÖ Tokens obtidos:', { expires_in: tokens.expires_in });

        // Buscar informa√ß√µes do usu√°rio com melhor tratamento de erro
        let userInfo;
        try {
          const userResponse = await fetch(
            `https://www.googleapis.com/oauth2/v2/userinfo?access_token=${tokens.access_token}`
          );
          
          if (!userResponse.ok) {
            console.warn('‚ö†Ô∏è Falha ao buscar dados do usu√°rio, usando email padr√£o');
            // Se falhar, usar email do token JWT (mais confi√°vel)
            const tokenPayload = JSON.parse(atob(tokens.access_token.split('.')[1] || '{}'));
            userInfo = { 
              email: tokenPayload.email || 'okamichan2022@gmail.com',
              name: tokenPayload.name || 'Usu√°rio Google'
            };
          } else {
            userInfo = await userResponse.json();
          }
        } catch (userError) {
          console.error('‚ùå Erro ao buscar usu√°rio, usando fallback:', userError);
          userInfo = { 
            email: 'okamichan2022@gmail.com',
            name: 'Usu√°rio Google' 
          };
        }
        
        console.log('üë§ Usu√°rio conectado:', userInfo.email);

        // Salvar tokens no localStorage
        const fullCredentials = {
          ...credentials,
          access_token: tokens.access_token,
          refresh_token: tokens.refresh_token,
          expires_at: Date.now() + (tokens.expires_in * 1000)
        };
        
        localStorage.setItem('google_calendar_credentials', JSON.stringify(fullCredentials));
        localStorage.setItem('google_calendar_email', userInfo.email);

        // Salvar estado conectado no Supabase
        await supabase
          .from("site_settings")
          .upsert({
            key: "google_calendar_connected",
            value: "true"
          });
        
        toast({
          title: "üéâ Google Calendar Conectado REAL!",
          description: `Conectado com ${userInfo.email}! Agendamentos ser√£o criados no seu Google Calendar DE VERDADE!`,
          duration: 6000,
        });

        // Usar email real detectado
        setGoogleCalendarSettings(prev => ({
          ...prev,
          connected: true,
          email: userInfo.email
        }));

        // Limpar URL
        window.history.replaceState({}, document.title, "/admin");
        
      } catch (error: any) {
        console.error('‚ùå Erro na autentica√ß√£o:', error);
        toast({
          variant: "destructive",
          title: "Erro na Conex√£o",
          description: error.message || "Erro ao finalizar conex√£o com Google Calendar",
        });
      } finally {
        setIsLoading(false);
      }
    }
  };

  const detectUserEmail = async () => {
    // FOR√áAR seu email real para testes
    const forcedEmail = "okamichan2022@gmail.com";
    
    console.log("üéØ For√ßando email para:", forcedEmail);
    
    return forcedEmail;
    
    // C√≥digo original comentado:
    // const { data: { user } } = await supabase.auth.getUser();
    // if (user?.email) {
    //   return user.email;
    // }
    // return "okamichan2022@gmail.com";
  };

  // ========================================
  // üïê FUN√á√ïES DE GEST√ÉO DE HOR√ÅRIOS
  // ========================================

  const loadOperatingHours = async () => {
    try {
      setIsOperatingHoursLoading(true);
      
      // TODO: Ativar quando banco estiver atualizado
      /*
      const { data, error } = await supabase
        .from('operating_hours')
        .select('*')
        .order('day_of_week');

      if (error) throw error;

      console.log('‚úÖ Hor√°rios carregados:', data);
      setOperatingHours(data || []);
      */
      
      // Dados mockados por enquanto
      const mockData = [
        { day_of_week: 0, is_open: false, open_time: null, close_time: null },
        { day_of_week: 1, is_open: true, open_time: '08:00', close_time: '18:00' },
        { day_of_week: 2, is_open: true, open_time: '08:00', close_time: '18:00' },
        { day_of_week: 3, is_open: true, open_time: '08:00', close_time: '18:00' },
        { day_of_week: 4, is_open: true, open_time: '08:00', close_time: '18:00' },
        { day_of_week: 5, is_open: true, open_time: '08:00', close_time: '18:00' },
        { day_of_week: 6, is_open: true, open_time: '08:00', close_time: '12:00' },
      ];
      setOperatingHours(mockData);
      
    } catch (error: any) {
      console.error('‚ùå Erro ao carregar hor√°rios:', error);
      toast({
        variant: "destructive",
        title: "Erro",
        description: "Erro ao carregar hor√°rios de funcionamento: " + error.message,
      });
    } finally {
      setIsOperatingHoursLoading(false);
    }
  };

  const saveOperatingHours = async (dayOfWeek: number, isOpen: boolean, openTime?: string, closeTime?: string) => {
    try {
      setIsLoading(true);
      
      // TODO: Ativar quando banco estiver atualizado
      console.log('‚è∞ Salvando hor√°rio:', { dayOfWeek, isOpen, openTime, closeTime });
      
      // Mock para demonstra√ß√£o
      toast({
        title: "‚úÖ Hor√°rio Salvo (Demo)",
        description: "Funcionalidade ser√° ativada ap√≥s atualiza√ß√£o do banco!",
      });
      
    } catch (error: any) {
      console.error('‚ùå Erro ao salvar hor√°rio:', error);
      toast({
        variant: "destructive",
        title: "Erro",
        description: "Erro ao salvar hor√°rio: " + error.message,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const loadDateBlocks = async () => {
    try {
      // TODO: Ativar quando banco estiver atualizado
      console.log('üìÖ Carregando bloqueios...');
      setDateBlocks([]); // Mock vazio por enquanto
      
    } catch (error: any) {
      console.error('‚ùå Erro ao carregar bloqueios:', error);
    }
  };

  const addDateBlock = async (blockData: any) => {
    try {
      setIsLoading(true);
      
      // TODO: Ativar quando banco estiver atualizado
      console.log('üö´ Adicionando bloqueio:', blockData);
      
      toast({
        title: "‚úÖ Bloqueio Adicionado (Demo)",
        description: "Funcionalidade ser√° ativada ap√≥s atualiza√ß√£o do banco!",
      });
      
    } catch (error: any) {
      console.error('‚ùå Erro ao adicionar bloqueio:', error);
      toast({
        variant: "destructive",
        title: "Erro",
        description: "Erro ao adicionar bloqueio: " + error.message,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const removeDateBlock = async (blockId: number) => {
    try {
      setIsLoading(true);
      
      // TODO: Ativar quando banco estiver atualizado
      console.log('üóëÔ∏è Removendo bloqueio:', blockId);
      
      toast({
        title: "‚úÖ Bloqueio Removido (Demo)",
        description: "Funcionalidade ser√° ativada ap√≥s atualiza√ß√£o do banco!",
      });
      
    } catch (error: any) {
      console.error('‚ùå Erro ao remover bloqueio:', error);
      toast({
        variant: "destructive",
        title: "Erro",
        description: "Erro ao remover bloqueio: " + error.message,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const disconnectGoogleCalendar = async () => {
    try {
      setIsLoading(true);
      
      // Limpar dados locais
      localStorage.removeItem('google_calendar_email');
      
      // Atualizar Supabase
      await supabase
        .from("site_settings")
        .upsert({
          key: "google_calendar_connected",
          value: "false"
        });
      
      toast({
        title: "üîå Desconectado!",
        description: "Google Calendar foi desconectado.",
      });

      setGoogleCalendarSettings(prev => ({
        ...prev,
        connected: false,
        email: ""
      }));
      
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "Erro",
        description: error.message,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const loadServices = async () => {
    const { data, error } = await supabase
      .from("services")
      .select("*")
      .order("name");

    if (!error) {
      setServices(data || []);
    }
  };

  const loadAppointments = async () => {
    const { data, error } = await supabase
      .from("appointments")
      .select(`
        *,
        services (name, price, duration_minutes),
        profiles (full_name, email, phone)
      `)
      .order("appointment_date", { ascending: true })
      .order("appointment_time", { ascending: true });

    if (!error) {
      setAppointments(data || []);
    }
  };

  const handleConfirm = async (aptId: string) => {
    setIsLoading(true);
    
    try {
      // Confirmar agendamento
      const { error } = await supabase
        .from("appointments")
        .update({ status: "confirmed" })
        .eq("id", aptId);

      if (error) throw error;

      // Se conectado, criar evento REAL no Google Calendar
      if (googleCalendarSettings.connected) {
        // Buscar dados do agendamento para criar o evento
        const { data: appointment } = await supabase
          .from("appointments")
          .select(`
            *,
            profiles:client_id (full_name, email, phone),
            services (name, duration_minutes, description)
          `)
          .eq("id", aptId)
          .single();

        if (appointment) {
          try {
            // Criar dados do evento
            const eventDateTime = new Date(`${appointment.appointment_date}T${appointment.appointment_time}`);
            const endDateTime = new Date(eventDateTime.getTime() + (appointment.services.duration_minutes * 60000));
            
            // Carregar credenciais com tokens
            const credentials = JSON.parse(localStorage.getItem('google_calendar_credentials') || '{}');
            
            console.log('üîç Verificando credenciais para Google Calendar...');
            console.log('üîë Credenciais dispon√≠veis:', {
              has_client_id: !!credentials.client_id,
              has_client_secret: !!credentials.client_secret,
              has_access_token: !!credentials.access_token,
              token_expires: credentials.expires_at ? new Date(credentials.expires_at).toLocaleString() : 'N/A'
            });
            
            if (!credentials.access_token) {
              throw new Error('üö® Token de acesso n√£o encontrado! Clique em "Desconectar" e "Conectar" novamente para obter um novo token.');
            }

            // Verificar se token n√£o expirou
            if (credentials.expires_at && Date.now() > credentials.expires_at) {
              console.error('‚ùå Token expirado:', new Date(credentials.expires_at));
              // Limpar token expirado automaticamente
              localStorage.removeItem('google_calendar_credentials');
              localStorage.removeItem('google_calendar_email');
              setGoogleCredentials(null);
              setGoogleCalendarSettings(prev => ({
                ...prev,
                connected: false,
                email: ''
              }));
              
              throw new Error('üïê Token expirado! Token removido automaticamente. Conecte novamente com o Google Calendar.');
            }

            // Inicializar API do Google Calendar
            const calendarAPI = new GoogleCalendarAPI(credentials);

            // Criar evento REAL
            const result = await calendarAPI.createEvent({
              title: `${appointment.services.name} - ${appointment.profiles.full_name}`,
              description: `üè• AGENDAMENTO TERAP√äUTICO üè•

üë§ Cliente: ${appointment.profiles.full_name}
üìß Email: ${appointment.profiles.email}
üìû Telefone: ${appointment.profiles.phone || 'N√£o informado'}

üíÜ‚Äç‚ôÄÔ∏è Servi√ßo: ${appointment.services.name}
üìù Descri√ß√£o: ${appointment.services.description || 'Sem descri√ß√£o'}
‚è∞ Dura√ß√£o: ${appointment.services.duration_minutes} minutos

üìã Observa√ß√µes: ${appointment.notes || 'Nenhuma observa√ß√£o especial'}

‚ú® Agendamento confirmado pelo sistema Therapy Flow ‚ú®`,
              startDateTime: eventDateTime.toISOString(),
              endDateTime: endDateTime.toISOString(),
              attendeeEmail: appointment.profiles.email,
              attendeeName: appointment.profiles.full_name
            });

            if (result.success) {
              // Salvar ID do evento para poder deletar depois
              await supabase
                .from("appointments")
                .update({ 
                  notes: `${appointment.notes || ''}\n[Google Calendar Event ID: ${result.eventId}]`.trim()
                })
                .eq("id", aptId);

              toast({
                title: "üéâ SUCESSO TOTAL!",
                description: `Agendamento confirmado E evento criado no Google Calendar de ${googleCalendarSettings.email}! Link: ${result.eventLink}`,
                duration: 8000,
              });

              console.log('üéâ EVENTO CRIADO DE VERDADE:', result);
            }

          } catch (calendarError: any) {
            console.error('‚ùå Erro no Google Calendar:', calendarError);
            
            // Verificar se √© erro de autentica√ß√£o
            if (calendarError.message && 
                (calendarError.message.includes('401') || 
                 calendarError.message.includes('token') || 
                 calendarError.message.includes('unauthorized'))) {
              
              console.log('üßπ Removendo token inv√°lido automaticamente...');
              localStorage.removeItem('google_calendar_credentials');
              localStorage.removeItem('google_calendar_email');
              setGoogleCredentials(null);
              setGoogleCalendarSettings(prev => ({
                ...prev,
                connected: false,
                email: ''
              }));
              
              toast({
                title: "‚úÖ Agendamento Confirmado",
                description: "Agendamento confirmado! Token do Google Calendar removido (estava inv√°lido). Reconecte para sincronizar.",
                variant: "default"
              });
            } else {
              toast({
                title: "‚úÖ Agendamento Confirmado",
                description: `Agendamento confirmado com sucesso! Erro no Google Calendar: ${calendarError.message}`,
                variant: "default"
              });
            }
          }

        } else {
          toast({
            title: t('admin.confirmedSuccess'),
            description: "Agendamento confirmado! (Dados do evento n√£o encontrados)",
          });
        }
      } else {
        toast({
          title: t('admin.confirmedSuccess'),
          description: "Agendamento confirmado! Para sincronizar com Google Calendar, conecte na aba correspondente.",
        });
      }

      loadAppointments();
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: t('common.error'),
        description: error.message,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleCancel = async (aptId: string) => {
    // Buscar dados do agendamento
    const { data: appointment, error } = await supabase
      .from("appointments")
      .select(`
        *,
        profiles:client_id (full_name, email),
        services (name_pt, name_en, name_fr)
      `)
      .eq("id", aptId)
      .single();

    if (error || !appointment) {
      toast({
        variant: "destructive",
        title: "Erro",
        description: "Erro ao buscar dados do agendamento",
      });
      return;
    }

    setSelectedCancelApt(appointment);
    setCancelDialogOpen(true);
  };

  const confirmCancellation = async () => {
    if (!selectedCancelApt || !cancelReasonValue.trim()) {
      toast({
        variant: "destructive",
        title: "Erro",
        description: "Motivo do cancelamento √© obrigat√≥rio",
      });
      return;
    }

    setIsLoading(true);
    
    try {
      const now = new Date();
      
      // Cancelar agendamento no banco
      const { error: updateError } = await supabase
        .from("appointments")
        .update({ 
          status: "cancelled",
          cancellation_reason: cancelReasonValue,
          cancelled_by: "owner",
          cancelled_at: now.toISOString(),
          slot_released: releaseSlot
        })
        .eq("id", selectedCancelApt.id);

      if (updateError) throw updateError;

      // Se conectado ao Google Calendar, tentar deletar evento
      if (googleCalendarSettings.connected && selectedCancelApt.google_calendar_event_id) {
        try {
          const credentials = JSON.parse(localStorage.getItem('google_calendar_credentials') || '{}');
          
          if (credentials.access_token) {
            const calendarApi = new GoogleCalendarAPI(credentials);
            await calendarApi.deleteEvent(selectedCancelApt.google_calendar_event_id);
            console.log('‚úÖ Evento removido do Google Calendar');
          }
        } catch (calendarError) {
          console.warn('‚ö†Ô∏è Erro ao remover do Google Calendar:', calendarError);
          // N√£o falha o cancelamento por isso
        }
      }

      // Enviar notifica√ß√£o ao cliente (implementar depois)
      // TODO: Implementar envio de email/WhatsApp para cliente

      toast({
        title: "‚úÖ Cancelamento Realizado",
        description: `Agendamento cancelado com sucesso. ${releaseSlot ? 'Hor√°rio liberado para outros clientes.' : 'Hor√°rio mantido bloqueado.'}`,
      });

      // Recarregar lista
      loadAppointments();
      
      // Fechar dialog
      setCancelDialogOpen(false);
      setSelectedCancelApt(null);
      setCancelReasonValue("");
      setReleaseSlot(true);

    } catch (error: any) {
      console.error('‚ùå Erro no cancelamento:', error);
      toast({
        variant: "destructive",
        title: "Erro no Cancelamento",
        description: error.message,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const getStatusBadge = (status: string) => {
    const variants: Record<string, "default" | "secondary" | "destructive" | "outline"> = {
      pending: "secondary",
      confirmed: "default",
      cancelled: "destructive",
      completed: "outline",
    };

    const labels: Record<string, string> = {
      pending: "Pendente",
      confirmed: "Confirmado",
      cancelled: "Cancelado",
      completed: "Conclu√≠do",
    };

    return <Badge variant={variants[status]}>{labels[status]}</Badge>;
  };

  const handleSaveService = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    
    const serviceData = {
      name: formData.get("name_pt") as string, // Manter compatibilidade
      name_pt: formData.get("name_pt") as string,
      name_en: formData.get("name_en") as string,
      name_fr: formData.get("name_fr") as string,
      description: formData.get("description_pt") as string, // Manter compatibilidade
      description_pt: formData.get("description_pt") as string,
      description_en: formData.get("description_en") as string,
      description_fr: formData.get("description_fr") as string,
      duration_minutes: parseInt(formData.get("duration_minutes") as string),
      price: parseFloat(formData.get("price") as string),
      active: formData.get("active") === "true",
    };

    if (editingService) {
      const { error } = await supabase
        .from("services")
        .update(serviceData)
        .eq("id", editingService.id);

      if (error) {
        toast({
          variant: "destructive",
          title: "Erro",
          description: error.message,
        });
      } else {
        toast({ title: "Servi√ßo atualizado!" });
      }
    } else {
      const { error } = await supabase
        .from("services")
        .insert([serviceData]);

      if (error) {
        toast({
          variant: "destructive",
          title: "Erro",
          description: error.message,
        });
      } else {
        toast({ title: "Servi√ßo criado!" });
      }
    }

    setIsServiceDialogOpen(false);
    setEditingService(null);
    loadServices();
  };

  const [serviceToDelete, setServiceToDelete] = useState<string | null>(null);
  
  // Estados para sistema de cancelamento avan√ßado
  const [cancelDialogOpen, setCancelDialogOpen] = useState(false);
  const [selectedCancelApt, setSelectedCancelApt] = useState<any>(null);
  const [cancelReasonValue, setCancelReasonValue] = useState("");
  const [releaseSlot, setReleaseSlot] = useState(true);

  const handleDeleteService = async (serviceId: string) => {
    const { error } = await supabase
      .from("services")
      .delete()
      .eq("id", serviceId);

    if (error) {
      toast({
        variant: "destructive",
        title: t('common.error'),
        description: error.message,
      });
    } else {
      toast({ title: t('admin.serviceDeleted') });
      loadServices();
    }
    setServiceToDelete(null);
  };

  const handleSaveSettings = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsSettingsLoading(true);

    const formData = new FormData(e.currentTarget);
    const settingsToUpdate = [
      { key: 'contact_phone', value: formData.get('contact_phone') as string },
      { key: 'contact_email', value: formData.get('contact_email') as string },
      { key: 'contact_address', value: formData.get('contact_address') as string },
      { key: 'hero_title_pt', value: formData.get('hero_title_pt') as string },
      { key: 'hero_title_en', value: formData.get('hero_title_en') as string },
      { key: 'hero_title_fr', value: formData.get('hero_title_fr') as string },
      { key: 'hero_subtitle_pt', value: formData.get('hero_subtitle_pt') as string },
      { key: 'hero_subtitle_en', value: formData.get('hero_subtitle_en') as string },
      { key: 'hero_subtitle_fr', value: formData.get('hero_subtitle_fr') as string },
    ];

    try {
      for (const setting of settingsToUpdate) {
        const { error } = await supabase
          .from('site_settings')
          .upsert({ 
            key: setting.key, 
            value: setting.value 
          }, { 
            onConflict: 'key' 
          });

        if (error) throw error;
      }

      toast({ title: t('admin.settingsSaved') });
      loadSiteSettings();
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: t('common.error'),
        description: error.message,
      });
    } finally {
      setIsSettingsLoading(false);
    }
  };

  const pendingCount = appointments.filter(a => a.status === "pending").length;
  const confirmedCount = appointments.filter(a => a.status === "confirmed").length;

  return (
    <div className="min-h-screen bg-background">
      <Navbar />
      
      <div className="container mx-auto px-4 pt-24 pb-12">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-4xl font-bold">Painel Administrativo</h1>
            <div className="flex gap-3">
              <Button 
                onClick={clearAllAppointments}
                variant="destructive"
                disabled={isLoading || appointments.length === 0}
                className="hover:bg-red-700"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Limpando...
                  </>
                ) : (
                  <>
                    <Trash2 className="mr-2 h-4 w-4" />
                    üßπ Limpar Tudo ({appointments.length})
                  </>
                )}
              </Button>
              <Button 
                onClick={openGoogleCalendar}
                className="bg-blue-600 hover:bg-blue-700"
              >
                <Calendar className="mr-2 h-4 w-4" />
                Abrir Google Calendar
                <ExternalLink className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </div>

          <div className="grid md:grid-cols-3 gap-6 mb-8">
            <Card>
              <CardHeader>
                <CardTitle>Pendentes</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-4xl font-bold text-secondary">{pendingCount}</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Confirmados</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-4xl font-bold text-primary">{confirmedCount}</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Total</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-4xl font-bold text-accent">{appointments.length}</p>
              </CardContent>
            </Card>
          </div>

          <Tabs defaultValue="appointments" className="w-full">
            <TabsList className="mb-6">
              <TabsTrigger value="appointments">{t('admin.appointments')}</TabsTrigger>
              <TabsTrigger value="services">{t('admin.services')}</TabsTrigger>
              <TabsTrigger value="hours">
                <Clock className="w-4 h-4 mr-2" />
                Hor√°rios
              </TabsTrigger>
              <TabsTrigger value="calendar">
                <Calendar className="w-4 h-4 mr-2" />
                Google Calendar
              </TabsTrigger>
              <TabsTrigger value="settings">
                <Settings className="w-4 h-4 mr-2" />
                {t('admin.settings')}
              </TabsTrigger>
            </TabsList>

            <TabsContent value="appointments">
              <Card className="shadow-glow">
                <CardHeader>
                  <CardTitle>Todos os Agendamentos</CardTitle>
                  <CardDescription>Gerencie as consultas dos clientes</CardDescription>
                </CardHeader>
                <CardContent>
              {appointments.length === 0 ? (
                <p className="text-center text-muted-foreground py-8">
                  Nenhum agendamento ainda
                </p>
              ) : (
                <div className="space-y-4">
                  {appointments.map((apt) => (
                    <Card key={apt.id}>
                      <CardContent className="pt-6">
                        <div className="flex items-start justify-between">
                          <div className="space-y-2 flex-1">
                            <div className="flex items-center gap-3">
                              <h3 className="font-semibold text-lg">
                                {apt.profiles?.full_name || "Cliente"}
                              </h3>
                              {getStatusBadge(apt.status)}
                            </div>
                            
                            <p className="text-sm text-muted-foreground">
                              {apt.profiles?.email} ‚Ä¢ {apt.profiles?.phone || "Sem telefone"}
                            </p>
                            
                            <p className="font-medium text-primary">
                              {apt.services?.name}
                            </p>
                            
                            <div className="flex items-center gap-4 text-sm text-muted-foreground">
                              <span className="flex items-center gap-1">
                                <Calendar className="w-4 h-4" />
                                {format(new Date(apt.appointment_date), "dd/MM/yyyy", { locale: ptBR })}
                              </span>
                              <span className="flex items-center gap-1">
                                <Clock className="w-4 h-4" />
                                {apt.appointment_time}
                              </span>
                            </div>
                            
                            {apt.notes && (
                              <p className="text-sm bg-muted p-3 rounded-md">
                                <strong>Observa√ß√µes:</strong> {apt.notes}
                              </p>
                            )}
                            
                            {apt.cancellation_reason && (
                              <p className="text-sm bg-destructive/10 text-destructive p-3 rounded-md">
                                <strong>Motivo do cancelamento:</strong> {apt.cancellation_reason}
                              </p>
                            )}
                          </div>
                          
                          <div className="flex gap-2 ml-4">
                            {apt.status === "pending" && (
                              <>
                                <Button
                                  size="sm"
                                  onClick={() => handleConfirm(apt.id)}
                                  disabled={isLoading}
                                >
                                  <Check className="w-4 h-4" />
                                </Button>
                                <Dialog>
                                  <DialogTrigger asChild>
                                    <Button
                                      size="sm"
                                      variant="destructive"
                                      onClick={() => setSelectedApt(apt)}
                                    >
                                      <X className="w-4 h-4" />
                                    </Button>
                                  </DialogTrigger>
                                  <DialogContent>
                                    <DialogHeader>
                                      <DialogTitle>Cancelar Agendamento</DialogTitle>
                                      <DialogDescription>
                                        Informe o motivo do cancelamento. O cliente ser√° notificado por email.
                                      </DialogDescription>
                                    </DialogHeader>
                                    <div className="space-y-4">
                                      <div>
                                        <Label htmlFor="reason">Motivo</Label>
                                        <Textarea
                                          id="reason"
                                          value={cancellationReason}
                                          onChange={(e) => setCancellationReason(e.target.value)}
                                          placeholder="Ex: Imprevisto pessoal, por favor reagende para outro dia..."
                                          rows={4}
                                        />
                                      </div>
                                      <Button
                                        onClick={() => handleCancel(apt.id)}
                                        variant="destructive"
                                        className="w-full"
                                        disabled={isLoading}
                                      >
                                        {isLoading ? (
                                          <>
                                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                            Cancelando...
                                          </>
                                        ) : (
                                          "Confirmar Cancelamento"
                                        )}
                                      </Button>
                                    </div>
                                  </DialogContent>
                                </Dialog>
                              </>
                            )}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="services">
              <Card className="shadow-glow">
                <CardHeader className="flex flex-row items-center justify-between">
                  <div>
                    <CardTitle>Gerenciar Servi√ßos</CardTitle>
                    <CardDescription>Adicione, edite ou remova servi√ßos</CardDescription>
                  </div>
                  <Dialog open={isServiceDialogOpen} onOpenChange={setIsServiceDialogOpen}>
                    <DialogTrigger asChild>
                      <Button onClick={() => setEditingService(null)}>
                        <Plus className="w-4 h-4 mr-2" />
                        Novo Servi√ßo
                      </Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>
                          {editingService ? "Editar Servi√ßo" : "Novo Servi√ßo"}
                        </DialogTitle>
                      </DialogHeader>
                      <form onSubmit={handleSaveService} className="space-y-4">
                        <div className="grid grid-cols-1 gap-4">
                          <h4 className="font-medium text-sm text-muted-foreground">Nome do Servi√ßo</h4>
                          <div className="grid grid-cols-3 gap-3">
                            <div>
                              <Label htmlFor="name_pt">Portugu√™s</Label>
                              <Input
                                id="name_pt"
                                name="name_pt"
                                defaultValue={editingService?.name_pt || editingService?.name}
                                placeholder="Ex: Massagem Relaxante"
                                required
                              />
                            </div>
                            <div>
                              <Label htmlFor="name_en">English</Label>
                              <Input
                                id="name_en"
                                name="name_en"
                                defaultValue={editingService?.name_en}
                                placeholder="Ex: Relaxing Massage"
                              />
                            </div>
                            <div>
                              <Label htmlFor="name_fr">Fran√ßais</Label>
                              <Input
                                id="name_fr"
                                name="name_fr"
                                defaultValue={editingService?.name_fr}
                                placeholder="Ex: Massage Relaxant"
                              />
                            </div>
                          </div>
                        </div>

                        <div className="grid grid-cols-1 gap-4">
                          <h4 className="font-medium text-sm text-muted-foreground">Descri√ß√£o do Servi√ßo</h4>
                          <div className="grid grid-cols-1 gap-3">
                            <div>
                              <Label htmlFor="description_pt">Portugu√™s</Label>
                              <Textarea
                                id="description_pt"
                                name="description_pt"
                                defaultValue={editingService?.description_pt || editingService?.description}
                                placeholder="Descri√ß√£o em portugu√™s..."
                                rows={2}
                              />
                            </div>
                            <div>
                              <Label htmlFor="description_en">English</Label>
                              <Textarea
                                id="description_en"
                                name="description_en"
                                defaultValue={editingService?.description_en}
                                placeholder="Description in English..."
                                rows={2}
                              />
                            </div>
                            <div>
                              <Label htmlFor="description_fr">Fran√ßais</Label>
                              <Textarea
                                id="description_fr"
                                name="description_fr"
                                defaultValue={editingService?.description_fr}
                                placeholder="Description en fran√ßais..."
                                rows={2}
                              />
                            </div>
                          </div>
                        </div>
                        <div>
                          <Label htmlFor="duration_minutes">Dura√ß√£o (min)</Label>
                          <Input
                            id="duration_minutes"
                            name="duration_minutes"
                            type="number"
                            defaultValue={editingService?.duration_minutes}
                            required
                          />
                        </div>
                        <div>
                          <Label htmlFor="price">Pre√ßo (‚Ç¨)</Label>
                          <Input
                            id="price"
                            name="price"
                            type="number"
                            step="0.01"
                            defaultValue={editingService?.price}
                            required
                          />
                        </div>
                        <div>
                          <Label htmlFor="active">Status</Label>
                          <select
                            id="active"
                            name="active"
                            defaultValue={editingService?.active ? "true" : "false"}
                            className="w-full p-2 border rounded"
                          >
                            <option value="true">Ativo</option>
                            <option value="false">Inativo</option>
                          </select>
                        </div>
                        <Button type="submit" className="w-full">
                          {editingService ? "Atualizar" : "Criar"}
                        </Button>
                      </form>
                    </DialogContent>
                  </Dialog>
                </CardHeader>
                <CardContent>
                  {services.length === 0 ? (
                    <p className="text-center text-muted-foreground py-8">
                      Nenhum servi√ßo cadastrado
                    </p>
                  ) : (
                    <div className="space-y-4">
                      {services.map((service) => (
                        <Card key={service.id}>
                          <CardContent className="pt-6">
                            <div className="flex items-start justify-between">
                              <div className="space-y-2 flex-1">
                                <div className="flex items-center justify-between">
                                  <h3 className="font-semibold text-lg">{service.name}</h3>
                                  <div className={`flex items-center gap-1 px-3 py-1 rounded-full text-sm font-medium ${
                                    service.active 
                                      ? "bg-green-100 text-green-800 border border-green-200" 
                                      : "bg-red-100 text-red-800 border border-red-200"
                                  }`}>
                                    {service.active ? (
                                      <>
                                        <Check className="w-3 h-3" />
                                        Ativo
                                      </>
                                    ) : (
                                      <>
                                        <X className="w-3 h-3" />
                                        Inativo
                                      </>
                                    )}
                                  </div>
                                </div>
                                {service.description && (
                                  <p className="text-sm text-muted-foreground">{service.description}</p>
                                )}
                                <div className="flex gap-4 text-sm">
                                  <span>‚è±Ô∏è {service.duration_minutes} min</span>
                                  <span className="font-bold text-primary">
                                    R$ {service.price.toFixed(2)}
                                  </span>
                                </div>
                              </div>
                              <div className="flex gap-2 ml-4">
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => {
                                    setEditingService(service);
                                    setIsServiceDialogOpen(true);
                                  }}
                                >
                                  <Edit className="w-4 h-4" />
                                </Button>
                                <Button
                                  size="sm"
                                  variant="destructive"
                                  onClick={() => setServiceToDelete(service.id)}
                                >
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>

            {/* ========================================
                üïê ABA DE GEST√ÉO DE HOR√ÅRIOS
            ======================================== */}
            <TabsContent value="hours">
              <div className="grid gap-6">
                
                {/* üïê HOR√ÅRIOS DE FUNCIONAMENTO */}
                <Card className="shadow-glow">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Clock className="w-5 h-5" />
                      Hor√°rios de Funcionamento
                    </CardTitle>
                    <CardDescription>
                      Configure os hor√°rios de atendimento para cada dia da semana
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    {isOperatingHoursLoading ? (
                      <div className="flex items-center justify-center py-8">
                        <Loader2 className="w-6 h-6 animate-spin mr-2" />
                        Carregando hor√°rios...
                      </div>
                    ) : (
                      <div className="space-y-4">
                        {['Domingo', 'Segunda-feira', 'Ter√ßa-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'S√°bado'].map((dayName, index) => {
                          const dayData = operatingHours.find(h => h.day_of_week === index);
                          const isOpen = dayData?.is_open || false;
                          const openTime = dayData?.open_time || '08:00';
                          const closeTime = dayData?.close_time || '18:00';

                          return (
                            <div key={index} className="flex items-center gap-4 p-4 border rounded-lg">
                              <div className="w-32 font-medium">
                                {dayName}
                              </div>
                              
                              <div className="flex items-center gap-2">
                                <input
                                  type="checkbox"
                                  checked={isOpen}
                                  onChange={(e) => {
                                    if (e.target.checked) {
                                      saveOperatingHours(index, true, openTime, closeTime);
                                    } else {
                                      saveOperatingHours(index, false);
                                    }
                                  }}
                                  className="rounded"
                                />
                                <span className="text-sm">Aberto</span>
                              </div>

                              {isOpen && (
                                <>
                                  <div className="flex items-center gap-2">
                                    <span className="text-sm">das</span>
                                    <Input
                                      type="time"
                                      value={openTime}
                                      onChange={(e) => {
                                        saveOperatingHours(index, true, e.target.value, closeTime);
                                      }}
                                      className="w-24"
                                    />
                                  </div>
                                  
                                  <div className="flex items-center gap-2">
                                    <span className="text-sm">√†s</span>
                                    <Input
                                      type="time"
                                      value={closeTime}
                                      onChange={(e) => {
                                        saveOperatingHours(index, true, openTime, e.target.value);
                                      }}
                                      className="w-24"
                                    />
                                  </div>
                                </>
                              )}

                              {!isOpen && (
                                <div className="text-sm text-muted-foreground">
                                  Fechado
                                </div>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    )}

                    <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                      <h4 className="font-medium text-blue-900 mb-2">üí° Como Funciona</h4>
                      <ul className="text-sm text-blue-800 space-y-1">
                        <li>‚Ä¢ Marque "Aberto" para dias de atendimento</li>
                        <li>‚Ä¢ Configure hor√°rio de abertura e fechamento</li>
                        <li>‚Ä¢ Clientes s√≥ poder√£o agendar nos hor√°rios configurados</li>
                        <li>‚Ä¢ Altera√ß√µes s√£o aplicadas imediatamente no sistema</li>
                      </ul>
                    </div>
                  </CardContent>
                </Card>

                {/* üö´ SISTEMA DE BLOQUEIOS */}
                <Card className="shadow-glow">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <X className="w-5 h-5" />
                      Bloqueios de Datas e Hor√°rios
                    </CardTitle>
                    <CardDescription>
                      Bloqueie per√≠odos espec√≠ficos (f√©rias, compromissos, etc.)
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    
                    {/* Formul√°rio para Adicionar Bloqueio */}
                    <div className="border rounded-lg p-4 mb-6">
                      <h4 className="font-medium mb-4">Adicionar Novo Bloqueio</h4>
                      
                      <form onSubmit={(e) => {
                        e.preventDefault();
                        const formData = new FormData(e.target as HTMLFormElement);
                        
                        const blockData = {
                          title: formData.get('title'),
                          description: formData.get('description'),
                          block_type: formData.get('block_type'),
                          start_date: formData.get('start_date'),
                          end_date: formData.get('end_date'),
                          start_time: formData.get('start_time') || null,
                          end_time: formData.get('end_time') || null,
                        };
                        
                        addDateBlock(blockData);
                        (e.target as HTMLFormElement).reset();
                      }} className="space-y-4">
                        
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <Label htmlFor="title">T√≠tulo do Bloqueio</Label>
                            <Input
                              id="title"
                              name="title"
                              placeholder="Ex: F√©rias de Janeiro"
                              required
                            />
                          </div>
                          
                          <div>
                            <Label htmlFor="block_type">Tipo</Label>
                            <select
                              id="block_type"
                              name="block_type"
                              className="w-full p-2 border border-gray-300 rounded-md"
                              required
                            >
                              <option value="vacation">F√©rias</option>
                              <option value="external_commitment">Compromisso Externo</option>
                              <option value="maintenance">Manuten√ß√£o</option>
                              <option value="custom">Outros</option>
                            </select>
                          </div>
                        </div>

                        <div>
                          <Label htmlFor="description">Descri√ß√£o (Opcional)</Label>
                          <Textarea
                            id="description"
                            name="description"
                            placeholder="Detalhes sobre o bloqueio..."
                            rows={2}
                          />
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <Label htmlFor="start_date">Data Inicial</Label>
                            <Input
                              id="start_date"
                              name="start_date"
                              type="date"
                              required
                            />
                          </div>
                          
                          <div>
                            <Label htmlFor="end_date">Data Final</Label>
                            <Input
                              id="end_date"
                              name="end_date"
                              type="date"
                              required
                            />
                          </div>
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <Label htmlFor="start_time">Hor√°rio Inicial (Opcional)</Label>
                            <Input
                              id="start_time"
                              name="start_time"
                              type="time"
                              placeholder="Deixe vazio para bloquear dia inteiro"
                            />
                          </div>
                          
                          <div>
                            <Label htmlFor="end_time">Hor√°rio Final (Opcional)</Label>
                            <Input
                              id="end_time"
                              name="end_time"
                              type="time"
                              placeholder="Deixe vazio para bloquear dia inteiro"
                            />
                          </div>
                        </div>

                        <Button type="submit" disabled={isLoading}>
                          {isLoading ? <Loader2 className="w-4 h-4 animate-spin mr-2" /> : <Plus className="w-4 h-4 mr-2" />}
                          Adicionar Bloqueio
                        </Button>
                      </form>
                    </div>

                    {/* Lista de Bloqueios Ativos */}
                    <div>
                      <h4 className="font-medium mb-4">Bloqueios Ativos ({dateBlocks.length})</h4>
                      
                      {dateBlocks.length === 0 ? (
                        <div className="text-center py-8 text-muted-foreground">
                          Nenhum bloqueio configurado
                        </div>
                      ) : (
                        <div className="space-y-3">
                          {dateBlocks.map((block) => (
                            <div key={block.id} className="flex items-center justify-between p-4 border rounded-lg">
                              <div>
                                <div className="font-medium">{block.title}</div>
                                <div className="text-sm text-muted-foreground">
                                  {format(new Date(block.start_date), "dd/MM/yyyy", { locale: ptBR })} - {format(new Date(block.end_date), "dd/MM/yyyy", { locale: ptBR })}
                                  {block.start_time && block.end_time && (
                                    <span> ‚Ä¢ {block.start_time} √†s {block.end_time}</span>
                                  )}
                                </div>
                                {block.description && (
                                  <div className="text-sm text-muted-foreground mt-1">
                                    {block.description}
                                  </div>
                                )}
                                <Badge variant="outline" className="mt-1">
                                  {block.block_type === 'vacation' && 'F√©rias'}
                                  {block.block_type === 'external_commitment' && 'Compromisso Externo'}
                                  {block.block_type === 'maintenance' && 'Manuten√ß√£o'}
                                  {block.block_type === 'custom' && 'Outros'}
                                </Badge>
                              </div>
                              
                              <Button
                                variant="destructive"
                                size="sm"
                                onClick={() => {
                                  if (confirm('Tem certeza que deseja remover este bloqueio?')) {
                                    removeDateBlock(block.id);
                                  }
                                }}
                              >
                                <Trash2 className="w-4 h-4" />
                              </Button>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>

                    <div className="mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                      <h4 className="font-medium text-green-900 mb-2">‚ú® Funcionalidades</h4>
                      <ul className="text-sm text-green-800 space-y-1">
                        <li>‚Ä¢ <strong>Bloqueio Total:</strong> Deixe hor√°rios vazios para bloquear dia inteiro</li>
                        <li>‚Ä¢ <strong>Bloqueio Parcial:</strong> Defina hor√°rios espec√≠ficos para bloquear</li>
                        <li>‚Ä¢ <strong>Tipos:</strong> Organize por f√©rias, compromissos, manuten√ß√£o, etc.</li>
                        <li>‚Ä¢ <strong>Autom√°tico:</strong> Clientes n√£o poder√£o agendar nos per√≠odos bloqueados</li>
                      </ul>
                    </div>
                  </CardContent>
                </Card>

              </div>
            </TabsContent>

            <TabsContent value="calendar">
              <Card className="shadow-glow">
                <CardHeader>
                  <CardTitle>üîó Integra√ß√£o Google Calendar</CardTitle>
                  <CardDescription>
                    Configure a conex√£o com o Google Calendar para sincroniza√ß√£o autom√°tica dos agendamentos
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  {/* Status da Conex√£o */}
                  <div className="p-4 border rounded-lg">
                    <div className="flex items-center gap-3 mb-4">
                      <div className={`w-3 h-3 rounded-full ${googleCalendarSettings.connected ? 'bg-green-500' : 'bg-red-500'}`}></div>
                      <span className="font-medium">
                        Status: {googleCalendarSettings.connected ? 'Conectado' : 'N√£o Conectado'}
                        {googleCalendarSettings.email && (
                          <span className="text-sm text-muted-foreground ml-2">({googleCalendarSettings.email})</span>
                        )}
                      </span>
                    </div>
                    
                    <div className="space-y-4">
                      {!googleCalendarSettings.connected ? (
                        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                          <h4 className="font-medium text-yellow-800 mb-2">‚ö†Ô∏è Configura√ß√£o Necess√°ria</h4>
                          <p className="text-yellow-700 text-sm mb-3">
                            Para funcionar, voc√™ precisa configurar as credenciais da API do Google Calendar. 
                            Siga os passos abaixo:
                          </p>
                          
                          <ol className="text-sm text-yellow-700 space-y-2 list-decimal list-inside">
                            <li>Acesse o <a href="https://console.cloud.google.com" target="_blank" className="text-blue-600 underline">Google Cloud Console</a></li>
                            <li>Crie um projeto ou selecione um existente</li>
                            <li>Ative a <strong>Google Calendar API</strong></li>
                            <li>Crie credenciais OAuth 2.0</li>
                            <li>Adicione seu dom√≠nio nas URLs autorizadas</li>
                            <li>Copie o Client ID e Client Secret</li>
                          </ol>
                        </div>
                      ) : (
                        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                          <h4 className="font-medium text-green-800 mb-2">‚úÖ Google Calendar Conectado!</h4>
                          <p className="text-green-700 text-sm mb-2">
                            Conectado com: <strong>{googleCalendarSettings.email}</strong>
                          </p>
                          <p className="text-green-700 text-sm">
                            Agora os agendamentos aprovados ser√£o automaticamente adicionados ao seu Google Calendar!
                          </p>
                        </div>
                      )}

                      {/* Formul√°rio de Credenciais */}
                      <form onSubmit={async (e) => {
                        e.preventDefault();
                        const formData = new FormData(e.currentTarget);
                        const clientId = formData.get("google_client_id") as string;
                        const clientSecret = formData.get("google_client_secret") as string;
                        await saveGoogleCalendarSettings(clientId, clientSecret);
                      }}>
                        <div className="grid md:grid-cols-2 gap-4 mb-4">
                          <div>
                            <Label htmlFor="google_client_id">Google Client ID</Label>
                            <Input
                              id="google_client_id"
                              name="google_client_id"
                              type="password"
                              defaultValue={googleCalendarSettings.client_id}
                              placeholder="Ex: 123456789-abcdef.apps.googleusercontent.com"
                              className="font-mono text-sm"
                              required
                            />
                          </div>
                          <div>
                            <Label htmlFor="google_client_secret">Google Client Secret</Label>
                            <Input
                              id="google_client_secret"
                              name="google_client_secret"
                              type="password"
                              defaultValue={googleCalendarSettings.client_secret}
                              placeholder="Ex: GOCSPX-xxxxxxxxxxxxxxxxxxxxx"
                              className="font-mono text-sm"
                              required
                            />
                          </div>
                        </div>

                        {/* Email Override */}
                        <div className="mb-4">
                          <Label htmlFor="override_email">üìß For√ßar Email (Opcional)</Label>
                          <Input
                            id="override_email"
                            name="override_email"
                            type="email"
                            defaultValue="okamichan2022@gmail.com"
                            placeholder="Seu email do Google Calendar"
                            className="font-mono text-sm"
                          />
                          <p className="text-xs text-muted-foreground mt-1">
                            Se deixar vazio, usar√° o email logado no sistema. Para for√ßar seu email, digite aqui.
                          </p>
                        </div>

                        {/* Bot√µes de A√ß√£o */}
                        <div className="flex gap-3">
                          {!googleCalendarSettings.connected ? (
                            <>
                              <Button type="submit" variant="outline" disabled={isLoading}>
                                {isLoading ? (
                                  <>
                                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                                    Salvando...
                                  </>
                                ) : (
                                  <>
                                    <Save className="w-4 h-4 mr-2" />
                                    Salvar Credenciais
                                  </>
                                )}
                              </Button>
                              <Button 
                                type="button" 
                                className="bg-blue-600 hover:bg-blue-700" 
                                onClick={connectGoogleCalendar}
                                disabled={isLoading || !googleCalendarSettings.client_id}
                              >
                                <Calendar className="w-4 h-4 mr-2" />
                                Conectar com Google
                              </Button>
                            </>
                          ) : (
                            <Button 
                              type="button" 
                              variant="destructive"
                              onClick={disconnectGoogleCalendar}
                              disabled={isLoading}
                            >
                              <X className="w-4 h-4 mr-2" />
                              Desconectar
                            </Button>
                          )}
                          <Button type="button" variant="secondary" onClick={openGoogleCalendar}>
                            <ExternalLink className="w-4 h-4 mr-2" />
                            Abrir Google Calendar
                          </Button>
                          <Button 
                            type="button" 
                            variant="outline"
                            onClick={() => {
                              console.log('üîç DEBUG - Estado atual do Google Calendar:');
                              console.log('üìã googleCalendarSettings:', googleCalendarSettings);
                              console.log('üíæ localStorage credentials:', localStorage.getItem('google_calendar_credentials'));
                              console.log('üìß localStorage email:', localStorage.getItem('google_calendar_email'));
                              
                              // Verificar se token est√° expirado
                              try {
                                const credentials = localStorage.getItem('google_calendar_credentials');
                                if (credentials) {
                                  const creds = JSON.parse(credentials);
                                  const now = Math.floor(Date.now() / 1000);
                                  const expiry = creds.expiry_date || creds.expires_at || 0;
                                  console.log('‚è∞ Token expira em:', new Date(expiry * 1000));
                                  console.log('üïê Agora:', new Date());
                                  console.log(expiry > 0 && now > expiry ? '‚ùå TOKEN EXPIRADO!' : '‚úÖ Token v√°lido');
                                }
                              } catch (e) {
                                console.error('‚ùå Erro ao verificar token:', e);
                              }
                              
                              toast({
                                title: "üîç Debug Info",
                                description: `Conectado: ${googleCalendarSettings.connected} | Email: ${googleCalendarSettings.email} | Veja console (F12)`,
                                duration: 5000,
                              });
                            }}
                          >
                            üîç Debug Status
                          </Button>
                          <Button 
                            type="button" 
                            variant="destructive"
                            size="sm"
                            onClick={() => {
                              console.log('üßπ Limpando token expirado...');
                              localStorage.removeItem('google_calendar_credentials');
                              localStorage.removeItem('google_calendar_email');
                              setGoogleCredentials(null);
                              setGoogleCalendarSettings(prev => ({
                                ...prev,
                                connected: false,
                                email: ''
                              }));
                              
                              toast({
                                title: "üßπ Token Limpo",
                                description: "Credenciais removidas. Fa√ßa login novamente.",
                                variant: "destructive",
                              });
                            }}
                          >
                            üßπ Limpar Token
                          </Button>
                        </div>
                      </form>

                      {/* Informa√ß√µes Adicionais */}
                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <h4 className="font-medium text-blue-800 mb-2">‚ÑπÔ∏è Como Funciona</h4>
                        <ul className="text-blue-700 text-sm space-y-1 list-disc list-inside">
                          <li>Quando voc√™ <strong>aprovar</strong> um agendamento, um evento ser√° criado automaticamente no seu Google Calendar</li>
                          <li>Quando voc√™ <strong>cancelar</strong> um agendamento, o evento ser√° removido do Google Calendar</li>
                          <li>Os eventos incluem: Nome do cliente, Servi√ßo, Data/Hora, Dura√ß√£o e Informa√ß√µes de contato</li>
                          <li>Apenas voc√™ (admin) ter√° acesso aos eventos criados</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="settings">
              <Card className="shadow-glow">
                <CardHeader>
                  <CardTitle>{t('admin.siteSettings')}</CardTitle>
                  <CardDescription>
                    Configure as informa√ß√µes que aparecem no site
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <form onSubmit={handleSaveSettings} className="space-y-6">
                    <div className="grid md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <h3 className="text-lg font-semibold">Informa√ß√µes de Contato</h3>
                        
                        <div>
                          <Label htmlFor="contact_phone">{t('admin.contactPhone')}</Label>
                          <Input
                            id="contact_phone"
                            name="contact_phone"
                            defaultValue={siteSettings.contact_phone || ''}
                            placeholder="+33 (0) 00 00 00 00"
                          />
                        </div>

                        <div>
                          <Label htmlFor="contact_email">{t('admin.contactEmail')}</Label>
                          <Input
                            id="contact_email"
                            name="contact_email"
                            type="email"
                            defaultValue={siteSettings.contact_email || ''}
                            placeholder="contact@touchedelumiere.fr"
                          />
                        </div>

                        <div>
                          <Label htmlFor="contact_address">Endere√ßo</Label>
                          <Textarea
                            id="contact_address"
                            name="contact_address"
                            defaultValue={siteSettings.contact_address || ''}
                            placeholder="Endere√ßo completo"
                            rows={3}
                          />
                        </div>
                      </div>

                      <div className="space-y-4">
                        <h3 className="text-lg font-semibold">T√≠tulos da P√°gina Principal</h3>
                        
                        <div>
                          <Label htmlFor="hero_title_pt">T√≠tulo (Portugu√™s)</Label>
                          <Input
                            id="hero_title_pt"
                            name="hero_title_pt"
                            defaultValue={siteSettings.hero_title_pt || ''}
                            placeholder="Bem-estar para Corpo e Alma"
                          />
                        </div>

                        <div>
                          <Label htmlFor="hero_title_en">T√≠tulo (English)</Label>
                          <Input
                            id="hero_title_en"
                            name="hero_title_en"
                            defaultValue={siteSettings.hero_title_en || ''}
                            placeholder="Wellness for Body and Soul"
                          />
                        </div>

                        <div>
                          <Label htmlFor="hero_title_fr">T√≠tulo (Fran√ßais)</Label>
                          <Input
                            id="hero_title_fr"
                            name="hero_title_fr"
                            defaultValue={siteSettings.hero_title_fr || ''}
                            placeholder="Bien-√™tre pour le Corps et l'√Çme"
                          />
                        </div>
                      </div>
                    </div>

                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold">Subt√≠tulos da P√°gina Principal</h3>
                      
                      <div className="grid md:grid-cols-3 gap-4">
                        <div>
                          <Label htmlFor="hero_subtitle_pt">Subt√≠tulo (Portugu√™s)</Label>
                          <Textarea
                            id="hero_subtitle_pt"
                            name="hero_subtitle_pt"
                            defaultValue={siteSettings.hero_subtitle_pt || ''}
                            placeholder="Massagens terap√™uticas, relaxamento e Reiki..."
                            rows={3}
                          />
                        </div>

                        <div>
                          <Label htmlFor="hero_subtitle_en">Subt√≠tulo (English)</Label>
                          <Textarea
                            id="hero_subtitle_en"
                            name="hero_subtitle_en"
                            defaultValue={siteSettings.hero_subtitle_en || ''}
                            placeholder="Therapeutic massages, relaxation and Reiki..."
                            rows={3}
                          />
                        </div>

                        <div>
                          <Label htmlFor="hero_subtitle_fr">Subt√≠tulo (Fran√ßais)</Label>
                          <Textarea
                            id="hero_subtitle_fr"
                            name="hero_subtitle_fr"
                            defaultValue={siteSettings.hero_subtitle_fr || ''}
                            placeholder="Massages th√©rapeutiques, relaxation et Reiki..."
                            rows={3}
                          />
                        </div>
                      </div>
                    </div>

                    <Button type="submit" className="w-full" size="lg" disabled={isSettingsLoading}>
                      {isSettingsLoading ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Salvando...
                        </>
                      ) : (
                        <>
                          <Save className="mr-2 h-4 w-4" />
                          Salvar Configura√ß√µes
                        </>
                      )}
                    </Button>
                  </form>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>

      {/* Dialog de confirma√ß√£o para deletar servi√ßo */}
      <AlertDialog open={!!serviceToDelete} onOpenChange={() => setServiceToDelete(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Confirmar Exclus√£o</AlertDialogTitle>
            <AlertDialogDescription>
              Tem certeza que deseja remover este servi√ßo? 
              Esta a√ß√£o n√£o pode ser desfeita. Os agendamentos vinculados a este servi√ßo ser√£o preservados com a informa√ß√£o "Servi√ßo Removido".
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancelar</AlertDialogCancel>
            <AlertDialogAction 
              onClick={() => serviceToDelete && handleDeleteService(serviceToDelete)}
              className="bg-red-600 hover:bg-red-700"
            >
              Sim, Remover
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Dialog de cancelamento de agendamento */}
      <Dialog open={cancelDialogOpen} onOpenChange={setCancelDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <X className="w-5 h-5 text-red-500" />
              Cancelar Agendamento
            </DialogTitle>
            <DialogDescription>
              {selectedCancelApt && (
                <div className="mt-3 p-3 bg-gray-50 rounded-lg">
                  <div className="text-sm">
                    <strong>Cliente:</strong> {selectedCancelApt.profiles?.full_name}<br/>
                    <strong>Servi√ßo:</strong> {selectedCancelApt.services?.name_pt}<br/>
                    <strong>Data:</strong> {format(new Date(selectedCancelApt.date), "dd/MM/yyyy", { locale: ptBR })}<br/>
                    <strong>Hor√°rio:</strong> {selectedCancelApt.time}
                  </div>
                </div>
              )}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <Label htmlFor="cancel-reason">Motivo do Cancelamento *</Label>
              <Textarea
                id="cancel-reason"
                placeholder="Ex: Emerg√™ncia m√©dica, reagendamento, indisponibilidade..."
                value={cancelReasonValue}
                onChange={(e) => setCancelReasonValue(e.target.value)}
                className="mt-1"
                rows={3}
              />
            </div>

            <div className="border-t pt-4">
              <Label className="text-sm font-medium">O que fazer com este hor√°rio?</Label>
              <div className="mt-2 space-y-2">
                <div className="flex items-center space-x-2">
                  <input
                    type="radio"
                    id="release-slot"
                    name="slot-action"
                    checked={releaseSlot}
                    onChange={() => setReleaseSlot(true)}
                  />
                  <Label htmlFor="release-slot" className="text-sm">
                    <span className="font-medium text-green-600">Liberar hor√°rio</span> - Outros clientes poder√£o agendar
                  </Label>
                </div>
                <div className="flex items-center space-x-2">
                  <input
                    type="radio"
                    id="keep-blocked"
                    name="slot-action"
                    checked={!releaseSlot}
                    onChange={() => setReleaseSlot(false)}
                  />
                  <Label htmlFor="keep-blocked" className="text-sm">
                    <span className="font-medium text-red-600">Manter bloqueado</span> - Hor√°rio ficar√° indispon√≠vel
                  </Label>
                </div>
              </div>
            </div>
          </div>

          <div className="flex gap-3 pt-4">
            <Button
              variant="outline"
              onClick={() => setCancelDialogOpen(false)}
              className="flex-1"
            >
              Voltar
            </Button>
            <Button
              variant="destructive"
              onClick={confirmCancellation}
              disabled={isLoading || !cancelReasonValue.trim()}
              className="flex-1"
            >
              {isLoading ? (
                <Loader2 className="w-4 h-4 animate-spin mr-2" />
              ) : (
                <X className="w-4 h-4 mr-2" />
              )}
              Confirmar Cancelamento
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
